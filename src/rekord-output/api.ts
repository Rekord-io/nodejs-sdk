/* tslint:disable */
/* eslint-disable */
/**
 * Rekord API
 * Rekord api definition
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Contains bc metadata associated with the rekord
 * @export
 * @interface BlockchainMeta
 */
export interface BlockchainMeta {
    /**
     * ID of the transaction
     * @type {string}
     * @memberof BlockchainMeta
     */
    'transactionId': string;
    /**
     * Timestamp of the transaction
     * @type {string}
     * @memberof BlockchainMeta
     */
    'transactionTs': string;
    /**
     * Last merkle path
     * @type {string}
     * @memberof BlockchainMeta
     */
    'merklePath'?: string;
}
/**
 * 
 * @export
 * @interface CreatePayloadURL201Response
 */
export interface CreatePayloadURL201Response {
    /**
     * 
     * @type {string}
     * @memberof CreatePayloadURL201Response
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayloadURL201Response
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CreatePayloadURLRequest
 */
export interface CreatePayloadURLRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePayloadURLRequest
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayloadURLRequest
     */
    'contentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayloadURLRequest
     */
    'workspace': string;
}
/**
 * 
 * @export
 * @interface CreateRekord400Response
 */
export interface CreateRekord400Response {
    /**
     * 
     * @type {string}
     * @memberof CreateRekord400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkspace400Response
 */
export interface CreateWorkspace400Response {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkspace400Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetPayloadURL200Response
 */
export interface GetPayloadURL200Response {
    /**
     * 
     * @type {string}
     * @memberof GetPayloadURL200Response
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PaginatedRekordResponse
 */
export interface PaginatedRekordResponse {
    /**
     * 
     * @type {Array<RekordMeta>}
     * @memberof PaginatedRekordResponse
     */
    'items': Array<RekordMeta>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRekordResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRekordResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRekordResponse
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRekordResponse
     */
    'totalPages': number;
}
/**
 * 
 * @export
 * @interface PaginatedWorkspaceResponse
 */
export interface PaginatedWorkspaceResponse {
    /**
     * 
     * @type {Array<Workspace>}
     * @memberof PaginatedWorkspaceResponse
     */
    'items': Array<Workspace>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedWorkspaceResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedWorkspaceResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedWorkspaceResponse
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedWorkspaceResponse
     */
    'totalPages': number;
}
/**
 * 
 * @export
 * @interface Rekord
 */
export interface Rekord {
    /**
     * 
     * @type {string}
     * @memberof Rekord
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Rekord
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rekord
     */
    'globalHash'?: string;
    /**
     * 
     * @type {RekordHashes}
     * @memberof Rekord
     */
    'hashes'?: RekordHashes;
    /**
     * 
     * @type {string}
     * @memberof Rekord
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof Rekord
     */
    'customer'?: string;
    /**
     * 
     * @type {RekordBlockchainMeta}
     * @memberof Rekord
     */
    'blockchainMeta'?: RekordBlockchainMeta | null;
    /**
     * Timestamp when the rekord was issued
     * @type {string}
     * @memberof Rekord
     */
    'issuedAt': string;
    /**
     * Source of the rekord
     * @type {string}
     * @memberof Rekord
     */
    'group'?: string;
    /**
     * Description of the rekord
     * @type {string}
     * @memberof Rekord
     */
    'description': string;
    /**
     * Original file name if applicable
     * @type {string}
     * @memberof Rekord
     */
    'originalFileName'?: string | null;
    /**
     * Type of payload (e.g., JSON, PDF)
     * @type {string}
     * @memberof Rekord
     */
    'payloadType': RekordPayloadTypeEnum;
    /**
     * The actual content of the rekord
     * @type {object}
     * @memberof Rekord
     */
    'payload'?: object;
    /**
     * filename associated with this rekord
     * @type {string}
     * @memberof Rekord
     */
    'file'?: string | null;
    /**
     * Status (e.g., RECORDED, SUBMITTED)
     * @type {string}
     * @memberof Rekord
     */
    'rekordStatus'?: RekordRekordStatusEnum;
}

export const RekordPayloadTypeEnum = {
    Json: 'JSON',
    File: 'FILE'
} as const;

export type RekordPayloadTypeEnum = typeof RekordPayloadTypeEnum[keyof typeof RekordPayloadTypeEnum];
export const RekordRekordStatusEnum = {
    Pending: 'PENDING',
    Submitted: 'SUBMITTED',
    Recorded: 'RECORDED',
    Failed: 'FAILED'
} as const;

export type RekordRekordStatusEnum = typeof RekordRekordStatusEnum[keyof typeof RekordRekordStatusEnum];

/**
 * Contains bc metadata associated with the rekord
 * @export
 * @interface RekordBlockchainMeta
 */
export interface RekordBlockchainMeta {
    /**
     * ID of the transaction
     * @type {string}
     * @memberof RekordBlockchainMeta
     */
    'transactionId': string;
    /**
     * Timestamp of the transaction
     * @type {string}
     * @memberof RekordBlockchainMeta
     */
    'transactionTs': string;
    /**
     * Last merkle path
     * @type {string}
     * @memberof RekordBlockchainMeta
     */
    'merklePath'?: string;
}
/**
 * Contains rekord hash values
 * @export
 * @interface RekordHashes
 */
export interface RekordHashes {
    /**
     * Global hash value
     * @type {string}
     * @memberof RekordHashes
     */
    'globalHash': string;
    /**
     * Payload hash value
     * @type {string}
     * @memberof RekordHashes
     */
    'payloadHash': string;
    /**
     * File hash value
     * @type {string}
     * @memberof RekordHashes
     */
    'fileHash'?: string | null;
}
/**
 * 
 * @export
 * @interface RekordMeta
 */
export interface RekordMeta {
    /**
     * 
     * @type {string}
     * @memberof RekordMeta
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RekordMeta
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof RekordMeta
     */
    'globalHash'?: string;
    /**
     * 
     * @type {RekordHashes}
     * @memberof RekordMeta
     */
    'hashes'?: RekordHashes;
    /**
     * 
     * @type {string}
     * @memberof RekordMeta
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof RekordMeta
     */
    'customer'?: string;
    /**
     * 
     * @type {RekordBlockchainMeta}
     * @memberof RekordMeta
     */
    'blockchainMeta'?: RekordBlockchainMeta | null;
    /**
     * Timestamp when the rekord was issued
     * @type {string}
     * @memberof RekordMeta
     */
    'issuedAt': string;
    /**
     * Source of the rekord
     * @type {string}
     * @memberof RekordMeta
     */
    'group'?: string;
    /**
     * Description of the rekord
     * @type {string}
     * @memberof RekordMeta
     */
    'description': string;
    /**
     * Original file name if applicable
     * @type {string}
     * @memberof RekordMeta
     */
    'originalFileName'?: string | null;
    /**
     * Type of payload (e.g., JSON, PDF)
     * @type {string}
     * @memberof RekordMeta
     */
    'payloadType': RekordMetaPayloadTypeEnum;
    /**
     * Status (e.g., RECORDED, SUBMITTED)
     * @type {string}
     * @memberof RekordMeta
     */
    'rekordStatus'?: RekordMetaRekordStatusEnum;
}

export const RekordMetaPayloadTypeEnum = {
    Json: 'JSON',
    File: 'FILE'
} as const;

export type RekordMetaPayloadTypeEnum = typeof RekordMetaPayloadTypeEnum[keyof typeof RekordMetaPayloadTypeEnum];
export const RekordMetaRekordStatusEnum = {
    Pending: 'PENDING',
    Submitted: 'SUBMITTED',
    Recorded: 'RECORDED',
    Failed: 'FAILED'
} as const;

export type RekordMetaRekordStatusEnum = typeof RekordMetaRekordStatusEnum[keyof typeof RekordMetaRekordStatusEnum];

/**
 * 
 * @export
 * @interface RekordRequest
 */
export interface RekordRequest {
    /**
     * The actual content of the rekord
     * @type {object}
     * @memberof RekordRequest
     */
    'payload': object;
    /**
     * Timestamp when the rekord was issued
     * @type {string}
     * @memberof RekordRequest
     */
    'issuedAt': string;
    /**
     * Source/Group of the rekord
     * @type {string}
     * @memberof RekordRequest
     */
    'group'?: string;
    /**
     * Rekord workspace
     * @type {string}
     * @memberof RekordRequest
     */
    'workspace'?: string;
    /**
     * Description of the rekord
     * @type {string}
     * @memberof RekordRequest
     */
    'description': string;
    /**
     * Original file name if applicable
     * @type {string}
     * @memberof RekordRequest
     */
    'originalFileName'?: string | null;
    /**
     * Type of payload (e.g., JSON, FILE)
     * @type {string}
     * @memberof RekordRequest
     */
    'payloadType': RekordRequestPayloadTypeEnum;
    /**
     * file key returned by the upload-url endpoint
     * @type {string}
     * @memberof RekordRequest
     */
    'file'?: string | null;
}

export const RekordRequestPayloadTypeEnum = {
    Json: 'JSON',
    File: 'FILE'
} as const;

export type RekordRequestPayloadTypeEnum = typeof RekordRequestPayloadTypeEnum[keyof typeof RekordRequestPayloadTypeEnum];

/**
 * 
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'blockchain'?: string;
}
/**
 * 
 * @export
 * @interface WorkspaceRequest
 */
export interface WorkspaceRequest {
    /**
     * The name of the workspace
     * @type {string}
     * @memberof WorkspaceRequest
     */
    'name': string;
    /**
     * the blockchain code associated with the workspace
     * @type {string}
     * @memberof WorkspaceRequest
     */
    'blockchain'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePayloadURLRequest} createPayloadURLRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayloadURL: async (createPayloadURLRequest: CreatePayloadURLRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPayloadURLRequest' is not null or undefined
            assertParamExists('createPayloadURL', 'createPayloadURLRequest', createPayloadURLRequest)
            const localVarPath = `/rekord/payload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayloadURLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RekordRequest} rekordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRekord: async (rekordRequest: RekordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rekordRequest' is not null or undefined
            assertParamExists('createRekord', 'rekordRequest', rekordRequest)
            const localVarPath = `/rekord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rekordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a workspace
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: async (workspaceRequest: WorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceRequest' is not null or undefined
            assertParamExists('createWorkspace', 'workspaceRequest', workspaceRequest)
            const localVarPath = `/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a workspace
         * @param {string} id ID of the workspace to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkspace', 'id', id)
            const localVarPath = `/workspace/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayloadURL: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPayloadURL', 'id', id)
            const localVarPath = `/rekord/{id}/payload-url`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRekord: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRekord', 'id', id)
            const localVarPath = `/rekord/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRekordMeta: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRekordMeta', 'id', id)
            const localVarPath = `/rekord/{id}/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id ID of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorkspace', 'id', id)
            const localVarPath = `/workspace/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {string} [group] group name
         * @param {string} [workspace] workspace id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRekords: async (page?: string, limit?: string, group?: string, workspace?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rekord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: async (page?: string, limit?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRekord: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rekord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a workspace
         * @param {string} id ID of the workspace to be updated
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspace: async (id: string, workspaceRequest: WorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkspace', 'id', id)
            // verify required parameter 'workspaceRequest' is not null or undefined
            assertParamExists('updateWorkspace', 'workspaceRequest', workspaceRequest)
            const localVarPath = `/workspace/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePayloadURLRequest} createPayloadURLRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayloadURL(createPayloadURLRequest: CreatePayloadURLRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePayloadURL201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayloadURL(createPayloadURLRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPayloadURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RekordRequest} rekordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRekord(rekordRequest: RekordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rekord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRekord(rekordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createRekord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a workspace
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkspace(workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspace(workspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes a workspace
         * @param {string} id ID of the workspace to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspace(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspace(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayloadURL(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPayloadURL200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayloadURL(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPayloadURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRekord(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rekord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRekord(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRekord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRekordMeta(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RekordMeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRekordMeta(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRekordMeta']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id ID of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspace(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspace(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {string} [group] group name
         * @param {string} [workspace] workspace id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRekords(page?: string, limit?: string, group?: string, workspace?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRekordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRekords(page, limit, group, workspace, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listRekords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkspaces(page?: string, limit?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedWorkspaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaces(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listWorkspaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRekord(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRekord(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateRekord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates a workspace
         * @param {string} id ID of the workspace to be updated
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkspace(id: string, workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspace(id, workspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePayloadURLRequest} createPayloadURLRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayloadURL(createPayloadURLRequest: CreatePayloadURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatePayloadURL201Response> {
            return localVarFp.createPayloadURL(createPayloadURLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RekordRequest} rekordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRekord(rekordRequest: RekordRequest, options?: RawAxiosRequestConfig): AxiosPromise<Rekord> {
            return localVarFp.createRekord(rekordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a workspace
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace(workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workspace> {
            return localVarFp.createWorkspace(workspaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a workspace
         * @param {string} id ID of the workspace to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkspace(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayloadURL(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPayloadURL200Response> {
            return localVarFp.getPayloadURL(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRekord(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Rekord> {
            return localVarFp.getRekord(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the rekord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRekordMeta(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RekordMeta> {
            return localVarFp.getRekordMeta(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id ID of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Workspace> {
            return localVarFp.getWorkspace(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {string} [group] group name
         * @param {string} [workspace] workspace id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRekords(page?: string, limit?: string, group?: string, workspace?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedRekordResponse> {
            return localVarFp.listRekords(page, limit, group, workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [page] Page number (default 1)
         * @param {string} [limit] Page size (default 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces(page?: string, limit?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedWorkspaceResponse> {
            return localVarFp.listWorkspaces(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRekord(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRekord(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a workspace
         * @param {string} id ID of the workspace to be updated
         * @param {WorkspaceRequest} workspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspace(id: string, workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workspace> {
            return localVarFp.updateWorkspace(id, workspaceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreatePayloadURLRequest} createPayloadURLRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPayloadURL(createPayloadURLRequest: CreatePayloadURLRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPayloadURL(createPayloadURLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RekordRequest} rekordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRekord(rekordRequest: RekordRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRekord(rekordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a workspace
     * @param {WorkspaceRequest} workspaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createWorkspace(workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createWorkspace(workspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a workspace
     * @param {string} id ID of the workspace to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspace(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWorkspace(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPayloadURL(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPayloadURL(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the rekord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRekord(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRekord(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the rekord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRekordMeta(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRekordMeta(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id ID of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspace(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWorkspace(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [page] Page number (default 1)
     * @param {string} [limit] Page size (default 10)
     * @param {string} [group] group name
     * @param {string} [workspace] workspace id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listRekords(page?: string, limit?: string, group?: string, workspace?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listRekords(page, limit, group, workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [page] Page number (default 1)
     * @param {string} [limit] Page size (default 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listWorkspaces(page?: string, limit?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listWorkspaces(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRekord(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRekord(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a workspace
     * @param {string} id ID of the workspace to be updated
     * @param {WorkspaceRequest} workspaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateWorkspace(id: string, workspaceRequest: WorkspaceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateWorkspace(id, workspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



